{"ast":null,"code":"'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\n\nconst invalidScopeDisables = require('./invalidScopeDisables');\n\nconst needlessDisables = require('./needlessDisables');\n\nconst reportDisables = require('./reportDisables');\n/** @typedef {import('stylelint').Formatter} Formatter */\n\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n\n/** @typedef {import('stylelint').StylelintStandaloneOptions} StylelintStandaloneOptions */\n\n/** @typedef {import('stylelint').StylelintStandaloneReturnValue} StylelintStandaloneReturnValue */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {StylelintStandaloneOptions} options\n * @param {Formatter} formatter\n *\n * @returns {StylelintStandaloneReturnValue}\n */\n\n\nfunction prepareReturnValue(stylelintResults, options, formatter) {\n  const {\n    reportNeedlessDisables,\n    reportInvalidScopeDisables,\n    reportDescriptionlessDisables,\n    maxWarnings\n  } = options;\n  reportDisables(stylelintResults);\n  if (reportNeedlessDisables) needlessDisables(stylelintResults);\n  if (reportInvalidScopeDisables) invalidScopeDisables(stylelintResults);\n  if (reportDescriptionlessDisables) descriptionlessDisables(stylelintResults);\n  const errored = stylelintResults.some(result => result.errored || result.parseErrors.length > 0 || result.warnings.some(warning => warning.severity === 'error'));\n  /** @type {StylelintStandaloneReturnValue} */\n\n  const returnValue = {\n    errored,\n    results: [],\n    output: '',\n    reportedDisables: []\n  };\n\n  if (maxWarnings !== undefined) {\n    const foundWarnings = stylelintResults.reduce((count, file) => {\n      return count + file.warnings.length;\n    }, 0);\n\n    if (foundWarnings > maxWarnings) {\n      returnValue.maxWarningsExceeded = {\n        maxWarnings,\n        foundWarnings\n      };\n    }\n  }\n\n  returnValue.output = formatter(stylelintResults, returnValue);\n  returnValue.results = stylelintResults;\n  return returnValue;\n}\n\nmodule.exports = prepareReturnValue;","map":{"version":3,"sources":["/Users/eduardol/workspace/app-test-laliga/node_modules/stylelint/lib/prepareReturnValue.js"],"names":["descriptionlessDisables","require","invalidScopeDisables","needlessDisables","reportDisables","prepareReturnValue","stylelintResults","options","formatter","reportNeedlessDisables","reportInvalidScopeDisables","reportDescriptionlessDisables","maxWarnings","errored","some","result","parseErrors","length","warnings","warning","severity","returnValue","results","output","reportedDisables","undefined","foundWarnings","reduce","count","file","maxWarningsExceeded","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,2BAAD,CAAvC;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,kBAAT,CAA4BC,gBAA5B,EAA8CC,OAA9C,EAAuDC,SAAvD,EAAkE;AACjE,QAAM;AACLC,IAAAA,sBADK;AAELC,IAAAA,0BAFK;AAGLC,IAAAA,6BAHK;AAILC,IAAAA;AAJK,MAKFL,OALJ;AAOAH,EAAAA,cAAc,CAACE,gBAAD,CAAd;AAEA,MAAIG,sBAAJ,EAA4BN,gBAAgB,CAACG,gBAAD,CAAhB;AAE5B,MAAII,0BAAJ,EAAgCR,oBAAoB,CAACI,gBAAD,CAApB;AAEhC,MAAIK,6BAAJ,EAAmCX,uBAAuB,CAACM,gBAAD,CAAvB;AAEnC,QAAMO,OAAO,GAAGP,gBAAgB,CAACQ,IAAjB,CACdC,MAAD,IACCA,MAAM,CAACF,OAAP,IACAE,MAAM,CAACC,WAAP,CAAmBC,MAAnB,GAA4B,CAD5B,IAEAF,MAAM,CAACG,QAAP,CAAgBJ,IAAhB,CAAsBK,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqB,OAAvD,CAJc,CAAhB;AAOA;;AACA,QAAMC,WAAW,GAAG;AACnBR,IAAAA,OADmB;AAEnBS,IAAAA,OAAO,EAAE,EAFU;AAGnBC,IAAAA,MAAM,EAAE,EAHW;AAInBC,IAAAA,gBAAgB,EAAE;AAJC,GAApB;;AAOA,MAAIZ,WAAW,KAAKa,SAApB,EAA+B;AAC9B,UAAMC,aAAa,GAAGpB,gBAAgB,CAACqB,MAAjB,CAAwB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC9D,aAAOD,KAAK,GAAGC,IAAI,CAACX,QAAL,CAAcD,MAA7B;AACA,KAFqB,EAEnB,CAFmB,CAAtB;;AAIA,QAAIS,aAAa,GAAGd,WAApB,EAAiC;AAChCS,MAAAA,WAAW,CAACS,mBAAZ,GAAkC;AAAElB,QAAAA,WAAF;AAAec,QAAAA;AAAf,OAAlC;AACA;AACD;;AAEDL,EAAAA,WAAW,CAACE,MAAZ,GAAqBf,SAAS,CAACF,gBAAD,EAAmBe,WAAnB,CAA9B;AACAA,EAAAA,WAAW,CAACC,OAAZ,GAAsBhB,gBAAtB;AAEA,SAAOe,WAAP;AACA;;AAEDU,MAAM,CAACC,OAAP,GAAiB3B,kBAAjB","sourcesContent":["'use strict';\n\nconst descriptionlessDisables = require('./descriptionlessDisables');\nconst invalidScopeDisables = require('./invalidScopeDisables');\nconst needlessDisables = require('./needlessDisables');\nconst reportDisables = require('./reportDisables');\n\n/** @typedef {import('stylelint').Formatter} Formatter */\n/** @typedef {import('stylelint').StylelintResult} StylelintResult */\n/** @typedef {import('stylelint').StylelintStandaloneOptions} StylelintStandaloneOptions */\n/** @typedef {import('stylelint').StylelintStandaloneReturnValue} StylelintStandaloneReturnValue */\n\n/**\n * @param {StylelintResult[]} stylelintResults\n * @param {StylelintStandaloneOptions} options\n * @param {Formatter} formatter\n *\n * @returns {StylelintStandaloneReturnValue}\n */\nfunction prepareReturnValue(stylelintResults, options, formatter) {\n\tconst {\n\t\treportNeedlessDisables,\n\t\treportInvalidScopeDisables,\n\t\treportDescriptionlessDisables,\n\t\tmaxWarnings,\n\t} = options;\n\n\treportDisables(stylelintResults);\n\n\tif (reportNeedlessDisables) needlessDisables(stylelintResults);\n\n\tif (reportInvalidScopeDisables) invalidScopeDisables(stylelintResults);\n\n\tif (reportDescriptionlessDisables) descriptionlessDisables(stylelintResults);\n\n\tconst errored = stylelintResults.some(\n\t\t(result) =>\n\t\t\tresult.errored ||\n\t\t\tresult.parseErrors.length > 0 ||\n\t\t\tresult.warnings.some((warning) => warning.severity === 'error'),\n\t);\n\n\t/** @type {StylelintStandaloneReturnValue} */\n\tconst returnValue = {\n\t\terrored,\n\t\tresults: [],\n\t\toutput: '',\n\t\treportedDisables: [],\n\t};\n\n\tif (maxWarnings !== undefined) {\n\t\tconst foundWarnings = stylelintResults.reduce((count, file) => {\n\t\t\treturn count + file.warnings.length;\n\t\t}, 0);\n\n\t\tif (foundWarnings > maxWarnings) {\n\t\t\treturnValue.maxWarningsExceeded = { maxWarnings, foundWarnings };\n\t\t}\n\t}\n\n\treturnValue.output = formatter(stylelintResults, returnValue);\n\treturnValue.results = stylelintResults;\n\n\treturn returnValue;\n}\n\nmodule.exports = prepareReturnValue;\n"]},"metadata":{},"sourceType":"script"}