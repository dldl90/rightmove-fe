{"ast":null,"code":"'use strict';\n/**\n * @type {import('stylelint').Formatter}\n */\n\nconst tapFormatter = results => {\n  let lines = [`TAP version 13\\n1..${results.length}`];\n  results.forEach((result, index) => {\n    lines.push(`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${result.source}`);\n\n    if (result.warnings.length > 0) {\n      lines.push('---', 'messages:');\n      result.warnings.forEach(warning => {\n        lines.push(` - message: \"${warning.text}\"`, `   severity: ${warning.severity}`, `   data:`, `     line: ${warning.line}`, `     column: ${warning.column}`, `     ruleId: ${warning.rule}`);\n      });\n      lines.push('---');\n    }\n  });\n  lines.push('');\n  return lines.join('\\n');\n};\n\nmodule.exports = tapFormatter;","map":{"version":3,"sources":["/Users/eduardol/workspace/app-test-laliga/node_modules/stylelint/lib/formatters/tapFormatter.js"],"names":["tapFormatter","results","lines","length","forEach","result","index","push","errored","ignored","source","warnings","warning","text","severity","line","column","rule","join","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;AACA,MAAMA,YAAY,GAAIC,OAAD,IAAa;AACjC,MAAIC,KAAK,GAAG,CAAE,sBAAqBD,OAAO,CAACE,MAAO,EAAtC,CAAZ;AAEAF,EAAAA,OAAO,CAACG,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClCJ,IAAAA,KAAK,CAACK,IAAN,CACE,GAAEF,MAAM,CAACG,OAAP,GAAiB,QAAjB,GAA4B,IAAK,IAAGF,KAAK,GAAG,CAAE,MAAKD,MAAM,CAACI,OAAP,GAAiB,UAAjB,GAA8B,EAAG,GACtFJ,MAAM,CAACK,MACP,EAHF;;AAMA,QAAIL,MAAM,CAACM,QAAP,CAAgBR,MAAhB,GAAyB,CAA7B,EAAgC;AAC/BD,MAAAA,KAAK,CAACK,IAAN,CAAW,KAAX,EAAkB,WAAlB;AAEAF,MAAAA,MAAM,CAACM,QAAP,CAAgBP,OAAhB,CAAyBQ,OAAD,IAAa;AACpCV,QAAAA,KAAK,CAACK,IAAN,CACE,gBAAeK,OAAO,CAACC,IAAK,GAD9B,EAEE,gBAAeD,OAAO,CAACE,QAAS,EAFlC,EAGE,UAHF,EAIE,cAAaF,OAAO,CAACG,IAAK,EAJ5B,EAKE,gBAAeH,OAAO,CAACI,MAAO,EALhC,EAME,gBAAeJ,OAAO,CAACK,IAAK,EAN9B;AAQA,OATD;AAWAf,MAAAA,KAAK,CAACK,IAAN,CAAW,KAAX;AACA;AACD,GAvBD;AAyBAL,EAAAA,KAAK,CAACK,IAAN,CAAW,EAAX;AAEA,SAAOL,KAAK,CAACgB,IAAN,CAAW,IAAX,CAAP;AACA,CA/BD;;AAiCAC,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["'use strict';\n\n/**\n * @type {import('stylelint').Formatter}\n */\nconst tapFormatter = (results) => {\n\tlet lines = [`TAP version 13\\n1..${results.length}`];\n\n\tresults.forEach((result, index) => {\n\t\tlines.push(\n\t\t\t`${result.errored ? 'not ok' : 'ok'} ${index + 1} - ${result.ignored ? 'ignored ' : ''}${\n\t\t\t\tresult.source\n\t\t\t}`,\n\t\t);\n\n\t\tif (result.warnings.length > 0) {\n\t\t\tlines.push('---', 'messages:');\n\n\t\t\tresult.warnings.forEach((warning) => {\n\t\t\t\tlines.push(\n\t\t\t\t\t` - message: \"${warning.text}\"`,\n\t\t\t\t\t`   severity: ${warning.severity}`,\n\t\t\t\t\t`   data:`,\n\t\t\t\t\t`     line: ${warning.line}`,\n\t\t\t\t\t`     column: ${warning.column}`,\n\t\t\t\t\t`     ruleId: ${warning.rule}`,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tlines.push('---');\n\t\t}\n\t});\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n};\n\nmodule.exports = tapFormatter;\n"]},"metadata":{},"sourceType":"script"}