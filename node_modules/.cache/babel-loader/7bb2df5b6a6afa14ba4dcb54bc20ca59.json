{"ast":null,"code":"import { ADD_ARTICLE, FOUND_BAD_WORD } from './actions';\nconst forbiddenWords = ['spam', 'money'];\n\nfunction forbiddenWordsMiddleware({\n  dispatch\n}) {\n  return function (next) {\n    return function (action) {\n      if (action.type === ADD_ARTICLE) {\n        const foundWord = forbiddenWords.filter(word => action.payload.title.includes(word));\n\n        if (foundWord.length) {\n          return dispatch({\n            type: FOUND_BAD_WORD,\n            payload: true\n          });\n        }\n\n        dispatch({\n          type: FOUND_BAD_WORD,\n          payload: false\n        });\n      }\n\n      return next(action);\n    };\n  };\n}\n\nexport { forbiddenWordsMiddleware };","map":{"version":3,"sources":["/Users/eduardol/workspace/app-test-laliga/src/redux/middleware.js"],"names":["ADD_ARTICLE","FOUND_BAD_WORD","forbiddenWords","forbiddenWordsMiddleware","dispatch","next","action","type","foundWord","filter","word","payload","title","includes","length"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,WAA5C;AAEA,MAAMC,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,CAAvB;;AAEA,SAASC,wBAAT,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAAgD;AAC9C,SAAO,UAAUC,IAAV,EAAgB;AACrB,WAAO,UAAUC,MAAV,EAAkB;AACvB,UAAIA,MAAM,CAACC,IAAP,KAAgBP,WAApB,EAAiC;AAC/B,cAAMQ,SAAS,GAAGN,cAAc,CAACO,MAAf,CAAuBC,IAAD,IAAUJ,MAAM,CAACK,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BH,IAA9B,CAAhC,CAAlB;;AACA,YAAIF,SAAS,CAACM,MAAd,EAAsB;AACpB,iBAAOV,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAEN,cAAR;AAAwBU,YAAAA,OAAO,EAAE;AAAjC,WAAD,CAAf;AACD;;AACDP,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAEN,cAAR;AAAwBU,UAAAA,OAAO,EAAE;AAAjC,SAAD,CAAR;AACD;;AACD,aAAON,IAAI,CAACC,MAAD,CAAX;AACD,KATD;AAUD,GAXD;AAYD;;AAED,SAASH,wBAAT","sourcesContent":["import { ADD_ARTICLE, FOUND_BAD_WORD } from './actions';\n\nconst forbiddenWords = ['spam', 'money'];\n\nfunction forbiddenWordsMiddleware({ dispatch }) {\n  return function (next) {\n    return function (action) {\n      if (action.type === ADD_ARTICLE) {\n        const foundWord = forbiddenWords.filter((word) => action.payload.title.includes(word));\n        if (foundWord.length) {\n          return dispatch({ type: FOUND_BAD_WORD, payload: true });\n        }\n        dispatch({ type: FOUND_BAD_WORD, payload: false });\n      }\n      return next(action);\n    };\n  };\n}\n\nexport { forbiddenWordsMiddleware };\n"]},"metadata":{},"sourceType":"module"}