{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validators = _interopRequireDefault(require(\"../dist/validators\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line import/default\n\n/**\n * @param {string} schemaId\n * @param {formatData~config} config\n * @returns {undefined}\n */\n\n\nconst validateConfig = (schemaId, config = {}) => {\n  const validate = _validators.default[schemaId];\n\n  if (!validate(config)) {\n    const errors = validate.errors.map(error => {\n      return {\n        dataPath: error.dataPath,\n        message: error.message,\n        params: error.params,\n        schemaPath: error.schemaPath\n      };\n    });\n    /* eslint-disable no-console */\n\n    console.log('config', config);\n    console.log('errors', errors);\n    /* eslint-enable no-console */\n\n    throw new Error('Invalid config.');\n  }\n};\n\nvar _default = validateConfig;\nexports.default = _default;","map":{"version":3,"sources":["../src/validateConfig.js"],"names":["schemaId","config","validate","validators","errors","error","dataPath","message","params","schemaPath","console"],"mappings":";;;;;;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;EADA;;AAGA;AACA;AACA;AACA;AACA;;;wBACgBA,Q,EAAUC,MAAM,GAAG,E,KAAO;AACxC,QAAMC,QAAQ,GAAGC,WAAAA,CAAAA,OAAAA,CAAjB,QAAiBA,CAAjB;;AACA,MAAI,CAACD,QAAQ,CAAb,MAAa,CAAb,EAAuB;AACrB,UAAME,MAAM,GAAG,QAAQ,CAAR,MAAA,CAAA,GAAA,CAAqBC,KAAD,IAAW;AAC5C,aAAO;AACLC,QAAAA,QAAQ,EAAED,KAAK,CADV,QAAA;AAELE,QAAAA,OAAO,EAAEF,KAAK,CAFT,OAAA;AAGLG,QAAAA,MAAM,EAAEH,KAAK,CAHR,MAAA;AAILI,QAAAA,UAAU,EAAEJ,KAAK,CAACI;AAJb,OAAP;AADF,KAAe,CAAf;AASA;;AACAC,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA;AACAA,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,EAAAA,MAAAA;AACA;;AAEA,UAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD","sourcesContent":["// eslint-disable-next-line import/default\nimport validators from '../dist/validators';\n\n/**\n * @param {string} schemaId\n * @param {formatData~config} config\n * @returns {undefined}\n */\nexport default (schemaId, config = {}) => {\n  const validate = validators[schemaId];\n  if (!validate(config)) {\n    const errors = validate.errors.map((error) => {\n      return {\n        dataPath: error.dataPath,\n        message: error.message,\n        params: error.params,\n        schemaPath: error.schemaPath,\n      };\n    });\n\n    /* eslint-disable no-console */\n    console.log('config', config);\n    console.log('errors', errors);\n    /* eslint-enable no-console */\n\n    throw new Error('Invalid config.');\n  }\n};\n"]},"metadata":{},"sourceType":"script"}