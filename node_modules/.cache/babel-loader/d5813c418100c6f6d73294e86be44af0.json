{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\n\nconst report = require('../../utils/report');\n\nconst ruleMessages = require('../../utils/ruleMessages');\n\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\nconst messages = ruleMessages(ruleName, {\n  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`\n});\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\nfunction rule(expectation, _, context) {\n  return (root, result) => {\n    const validOptions = validateOptions(result, ruleName, {\n      actual: expectation,\n      possible: ['short', 'long']\n    });\n\n    if (!validOptions) {\n      return;\n    }\n\n    root.walkDecls(decl => {\n      const parsedValue = valueParser(getValue(decl));\n      let needsFix = false;\n      parsedValue.walk(node => {\n        const {\n          value: hexValue\n        } = node;\n        if (isIgnoredFunction(node)) return false;\n        if (!isHexColor(node)) return;\n\n        if (expectation === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n          return;\n        }\n\n        if (expectation === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n          return;\n        }\n\n        const variant = expectation === 'long' ? longer : shorter;\n        const expectedHex = variant(hexValue);\n\n        if (context.fix) {\n          node.value = expectedHex;\n          needsFix = true;\n          return;\n        }\n\n        report({\n          message: messages.expected(hexValue, expectedHex),\n          node: decl,\n          index: declarationValueIndex(decl) + node.sourceIndex,\n          result,\n          ruleName\n        });\n      });\n\n      if (needsFix) {\n        setValue(decl, parsedValue.toString());\n      }\n    });\n  };\n}\n\nfunction canShrink(hex) {\n  hex = hex.toLowerCase();\n  return hex[1] === hex[2] && hex[3] === hex[4] && hex[5] === hex[6] && (hex.length === 7 || hex.length === 9 && hex[7] === hex[8]);\n}\n\nfunction shorter(hex) {\n  let hexVariant = '#';\n\n  for (let i = 1; i < hex.length; i += 2) {\n    hexVariant += hex[i];\n  }\n\n  return hexVariant;\n}\n\nfunction longer(hex) {\n  let hexVariant = '#';\n\n  for (let i = 1; i < hex.length; i++) {\n    hexVariant += hex[i] + hex[i];\n  }\n\n  return hexVariant;\n}\n\nfunction isIgnoredFunction({\n  type,\n  value\n}) {\n  return type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\nfunction isHexColor({\n  type,\n  value\n}) {\n  return type === 'word' && HEX.test(value);\n}\n\nfunction getValue(decl) {\n  return decl.raws.value ? decl.raws.value.raw : decl.value;\n}\n\nfunction setValue(decl, value) {\n  if (decl.raws.value) decl.raws.value.raw = value;else decl.value = value;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;","map":{"version":3,"sources":["/Users/eduardol/workspace/app-test-laliga/node_modules/stylelint/lib/rules/color-hex-length/index.js"],"names":["valueParser","require","declarationValueIndex","report","ruleMessages","validateOptions","ruleName","messages","expected","actual","HEX","IGNORED_FUNCTIONS","Set","rule","expectation","_","context","root","result","validOptions","possible","walkDecls","decl","parsedValue","getValue","needsFix","walk","node","value","hexValue","isIgnoredFunction","isHexColor","length","canShrink","variant","longer","shorter","expectedHex","fix","message","index","sourceIndex","setValue","toString","hex","toLowerCase","hexVariant","i","type","has","test","raws","raw","module","exports"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\n'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst declarationValueIndex = require('../../utils/declarationValueIndex');\nconst report = require('../../utils/report');\nconst ruleMessages = require('../../utils/ruleMessages');\nconst validateOptions = require('../../utils/validateOptions');\n\nconst ruleName = 'color-hex-length';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,\n});\n\nconst HEX = /^#[0-9A-Za-z]+/;\nconst IGNORED_FUNCTIONS = new Set(['url']);\n\nfunction rule(expectation, _, context) {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: expectation,\n\t\t\tpossible: ['short', 'long'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkDecls((decl) => {\n\t\t\tconst parsedValue = valueParser(getValue(decl));\n\t\t\tlet needsFix = false;\n\n\t\t\tparsedValue.walk((node) => {\n\t\t\t\tconst { value: hexValue } = node;\n\n\t\t\t\tif (isIgnoredFunction(node)) return false;\n\n\t\t\t\tif (!isHexColor(node)) return;\n\n\t\t\t\tif (expectation === 'long' && hexValue.length !== 4 && hexValue.length !== 5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (expectation === 'short' && (hexValue.length < 6 || !canShrink(hexValue))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst variant = expectation === 'long' ? longer : shorter;\n\t\t\t\tconst expectedHex = variant(hexValue);\n\n\t\t\t\tif (context.fix) {\n\t\t\t\t\tnode.value = expectedHex;\n\t\t\t\t\tneedsFix = true;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected(hexValue, expectedHex),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tindex: declarationValueIndex(decl) + node.sourceIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (needsFix) {\n\t\t\t\tsetValue(decl, parsedValue.toString());\n\t\t\t}\n\t\t});\n\t};\n}\n\nfunction canShrink(hex) {\n\thex = hex.toLowerCase();\n\n\treturn (\n\t\thex[1] === hex[2] &&\n\t\thex[3] === hex[4] &&\n\t\thex[5] === hex[6] &&\n\t\t(hex.length === 7 || (hex.length === 9 && hex[7] === hex[8]))\n\t);\n}\n\nfunction shorter(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i += 2) {\n\t\thexVariant += hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\nfunction longer(hex) {\n\tlet hexVariant = '#';\n\n\tfor (let i = 1; i < hex.length; i++) {\n\t\thexVariant += hex[i] + hex[i];\n\t}\n\n\treturn hexVariant;\n}\n\nfunction isIgnoredFunction({ type, value }) {\n\treturn type === 'function' && IGNORED_FUNCTIONS.has(value.toLowerCase());\n}\n\nfunction isHexColor({ type, value }) {\n\treturn type === 'word' && HEX.test(value);\n}\n\nfunction getValue(decl) {\n\treturn decl.raws.value ? decl.raws.value.raw : decl.value;\n}\n\nfunction setValue(decl, value) {\n\tif (decl.raws.value) decl.raws.value.raw = value;\n\telse decl.value = value;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nmodule.exports = rule;\n"]},"metadata":{},"sourceType":"script"}