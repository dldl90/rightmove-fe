{"ast":null,"code":"'use strict';\n\nconst {\n  isPathValid\n} = require('ignore').default;\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\n\n\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n  const validForIgnore = filePaths.filter(isPathValid); // Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\n  const notValidForIgnore = new Set(filePaths.filter(p => !validForIgnore.includes(p)));\n  const filteredByIgnore = new Set(ignorer.filter(validForIgnore)); // Preserving files order, while removing paths which were filtered by `ignore`\n\n  return filePaths.filter(p => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};","map":{"version":3,"sources":["/Users/eduardol/workspace/app-test-laliga/node_modules/stylelint/lib/utils/filterFilePaths.js"],"names":["isPathValid","require","default","module","exports","filterFilePaths","ignorer","filePaths","validForIgnore","filter","notValidForIgnore","Set","p","includes","filteredByIgnore","has"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,QAAD,CAAP,CAAkBC,OAA1C;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,SAAlC,EAA6C;AAC7D,QAAMC,cAAc,GAAGD,SAAS,CAACE,MAAV,CAAiBT,WAAjB,CAAvB,CAD6D,CAE7D;;AACA,QAAMU,iBAAiB,GAAG,IAAIC,GAAJ,CAAQJ,SAAS,CAACE,MAAV,CAAkBG,CAAD,IAAO,CAACJ,cAAc,CAACK,QAAf,CAAwBD,CAAxB,CAAzB,CAAR,CAA1B;AAEA,QAAME,gBAAgB,GAAG,IAAIH,GAAJ,CAAQL,OAAO,CAACG,MAAR,CAAeD,cAAf,CAAR,CAAzB,CAL6D,CAO7D;;AACA,SAAOD,SAAS,CAACE,MAAV,CAAkBG,CAAD,IAAOF,iBAAiB,CAACK,GAAlB,CAAsBH,CAAtB,KAA4BE,gBAAgB,CAACC,GAAjB,CAAqBH,CAArB,CAApD,CAAP;AACA,CATD","sourcesContent":["'use strict';\n\nconst { isPathValid } = require('ignore').default;\n\n/**\n * @param {import('ignore').Ignore} ignorer\n * @param {string[]} filePaths\n * @returns {string[]}\n */\nmodule.exports = function filterFilePaths(ignorer, filePaths) {\n\tconst validForIgnore = filePaths.filter(isPathValid);\n\t// Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`\n\tconst notValidForIgnore = new Set(filePaths.filter((p) => !validForIgnore.includes(p)));\n\n\tconst filteredByIgnore = new Set(ignorer.filter(validForIgnore));\n\n\t// Preserving files order, while removing paths which were filtered by `ignore`\n\treturn filePaths.filter((p) => notValidForIgnore.has(p) || filteredByIgnore.has(p));\n};\n"]},"metadata":{},"sourceType":"script"}